package com.ideal.arrangement.design;

/**
 * 创建者     ideal
 * 创建时间   2019/1/9 15:48
 * 描述	    模式说明
 * 更新描述   $$$$
 */
public class Design {
    /**
     * 2.原则：
     * 2.单例模式：应用最广的模式
     * 3.Builder模式：自由扩展你的项目
     * 4.原型模式：使程序运行更高效
     * 5.工厂方法模式：应用最广泛的模式
     * 6.抽象工厂模式：创建型设计模式
     * 7.策略模式：时势造英雄
     * 8.状态模式：suiyueran
     * 9.责任链模式：使编程更有灵活性
     * 10.解释器模式：化繁为简的翻译机
     * 11.命令模式：让程序畅通执行
     * 12.观察者模式：解决解耦的钥匙
     * 13.备忘录模式：编程中的后悔药
     * 14.迭代器模式：解决问题的第三者
     * 15.模板方法模式：抓住问题的核心
     * 16.访问者模式
     * 17.中介者模式-和事佬
     * 18.代理模式-编程好帮手
     * 19.组合模式:物以类聚
     * 20.适配器模式：得心应手的粘合剂
     * 21.装饰模式
     * 22.享元模式：对象共享，避免创建多个对象
     * 23.外观模式：统一编程接口
     * 24.桥接模式：连接两地的交通枢纽
     * 25.MVC的介绍和实践
     * 26.MVP应用架构模式
     * 27.MVVM应用
     * 28.整理
     */
}
